install.packages("RANN")
library("RANN", lib.loc="~/R/win-library/3.1")
pml.train <- read.csv("pml-training.csv")
pml.test <- read.csv("pml-testing.csv")
set.seed(1234)
trainingIndex <- createDataPartition(pml.train$classe, list = FALSE, p = 0.7)
library(caret)
trainingIndex <- createDataPartition(pml.train$classe, list = FALSE, p = 0.7)
train = pml.train[trainingIndex, ]
test = pml.train[-trainingIndex, ]
num_idx = which(lapply(train, class) %in% c("numeric"))
preModel <- preProcess(train[, num_idx], method = c("knnImpute"))
ptraining <- cbind(train$classe, predict(preModel, train[, num_idx]))
ptraining<-cbind(train$classe,predict(preModel,train[,num_idx]))
View(pml.train)
ptraining<-cbind(train$classe,predict(preModel,train[,num_idx]))
ptesting <- cbind(test$classe, predict(preModel, test[, num_idx]))
preModel<-preProcess(train[,num_idx], method=c("knnImpute"))
ptraining<-cbind(train$classe,predict(preModel,train[,num_idx]))
ptesting <- cbind(test$classe, predict(preModel, test[, num_idx]))
names(ptraining)[1] <- "classe"
library(caret)
trainingRaw <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingRaw <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainingRaw$classe <- as.factor(trainingRaw$classe)
str(trainingRaw)
NAindex <- apply(trainingRaw,2,function(x) {sum(is.na(x))})
trainingRaw <- trainingRaw[,which(NAindex == 0)]
NAindex <- apply(testingRaw,2,function(x) {sum(is.na(x))})
testingRaw <- testingRaw[,which(NAindex == 0)]
v <- which(lapply(trainingRaw, class) %in% "numeric")
preObj <-preProcess(trainingRaw[,v],method=c('knnImpute', 'center', 'scale'))
trainLess1 <- predict(preObj, trainingRaw[,v])
trainLess1$classe <- trainingRaw$classe
testLess1 <-predict(preObj,testingRaw[,v])
nzv <- nearZeroVar(trainLess1,saveMetrics=TRUE)
trainLess1 <- trainLess1[,nzv$nzv==FALSE]
nzv <- nearZeroVar(testLess1,saveMetrics=TRUE)
testLess1 <- testLess1[,nzv$nzv==FALSE]
set.seed(12031987)
inTrain = createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)
training = trainLess1[inTrain,]
crossValidation = trainLess1[-inTrain,]
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
trainingPred <- predict(modFit, training)
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit
trainingPred <- predict(modFit, training)
confusionMatrix(trainingPred, training$classe)
trainingPred <- predict(modFit,training)
library(caret)
library(RANN)
trainingRaw <- read.csv(file="pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingRaw <- read.csv(file="pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainingRaw$classe <- as.factor(trainingRaw$classe)
str(trainingRaw)
NAindex <- apply(trainingRaw,2,function(x) {sum(is.na(x))})
trainingRaw <- trainingRaw[,which(NAindex == 0)]
NAindex <- apply(testingRaw,2,function(x) {sum(is.na(x))})
testingRaw <- testingRaw[,which(NAindex == 0)]
v <- which(lapply(trainingRaw, class) %in% "numeric")
preObj <-preProcess(trainingRaw[,v],method=c('knnImpute', 'center', 'scale'))
trainLess1 <- predict(preObj, trainingRaw[,v])
trainLess1$classe <- trainingRaw$classe
testLess1 <-predict(preObj,testingRaw[,v])
nzv <- nearZeroVar(trainLess1,saveMetrics=TRUE)
trainLess1 <- trainLess1[,nzv$nzv==FALSE]
nzv <- nearZeroVar(testLess1,saveMetrics=TRUE)
testLess1 <- testLess1[,nzv$nzv==FALSE]
set.seed(12031987)
inTrain = createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)
training = trainLess1[inTrain,]
crossValidation = trainLess1[-inTrain,]
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit
trainingPred <- predict(modFit,training)
confusionMatrix(trainingPred, training$classe)
cvPred <- predict(modFit, crossValidation)
confusionMatrix(cvPred, crossValidation$classe)
```
testingPred <- predict(modFit, testLess1)
testingPred
set.seed(12031987)
inTrain <- createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)
training <- trainLess1[inTrain,]
crossValidation <- trainLess1[-inTrain,]
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit
trainingPred <- predict(modFit,training)
confusionMatrix(trainingPred, training$classe)
set.seed(614)
library(lattice); library(ggplot2); library(caret)
pml.training <- read.csv("pml-training.csv")
inTrain <- createDataPartition(y=pml.training$classe, p=0.9, list=FALSE)
training <- pml.training[inTrain,]
testing <- pml.training[-inTrain,]
ptm <- proc.time()
modFit <- train(classe ~ user_name + pitch_arm + yaw_arm + roll_arm + roll_belt + pitch_belt + yaw_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z + accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x + magnet_belt_y + magnet_belt_z + gyros_arm_x + gyros_arm_y + gyros_arm_z + accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x + magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell + yaw_dumbbell, method="gbm", data=training, verbose=FALSE)
proc.time() - ptm
print(modFit)
predictTr <- predict(modFit,training)
table(predictTr, training$classe)
summary(modFit,n.trees=150)
qplot(roll_belt, yaw_belt,colour=classe,data=training)
ggplot(modFit)
predictTe <- predict(modFit,testing)
table(predictTe, testing$classe)
pml.testing <- read.csv("~/R/Coursera /Machine Learning/Project/pml-testing.csv")
pml.testing <- read.csv("pml-testing.csv")
answers <- as.character(predict(modFit, pml.testing))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
